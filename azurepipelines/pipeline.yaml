trigger:
- main

resources:
- repo: self

variables:
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  repo: "projektzespolowy"

stages:
- stage: Terraform
  jobs:
  - job: TerraformJob
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        terraform init
        terraform plan -out=tfplan
        terraform apply -auto-approve tfplan
      displayName: 'Terraform init, plan and apply'
      workingDirectory: Terraform

    - task: PowerShell@2
      displayName: 'Set Terraform Outputs as Pipeline Variables'
      name: TfOutput
      inputs:
        workingDirectory: Terraform
        targetType: 'inline'
        script: |
          $outputs = terraform output -json | ConvertFrom-Json
          foreach ($key in $outputs.PSObject.Properties.Name) {
            $value = $outputs.$key.value
            $sanitizedKey = $key -replace '\.', '_'
            Write-Host $sanitizedKey
            Write-Host $value
            Write-Host "##vso[task.setvariable variable=$sanitizedKey]$value"
            echo "published variable $sanitizedKey"
          }
        pwsh: true

    - task: AzureCLI@2
      displayName: Login to ACR
      inputs:
        azureSubscription: ProjektZespolowySC
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az login --service-principal --username "ddfd42e1-e9a2-44fb-aa12-036b044748d2" --password "mVd8Q~sQhaEhKfSeTIkPZOm1Yh9pOmdQ2phZzb4N" --tenant "7babbace-799f-4cbd-991a-54446c9b1c8e"
          az acr login --name $(container_registry_name)

    - task: Docker@2
      inputs:
        repository: $(container_registry_login_server)/$(repo)
        command: 'buildAndPush'
        Dockerfile: $(dockerfilePath)
        tags: |
          $(tag)

    - task: AzureCLI@2
      inputs:
        azureSubscription: ProjektZespolowySC
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group $(resource_group_name) --name $(kubernetes_cluster_name)
          kubectl create secret generic app-secrets --from-literal=CONNECTION_STRING='$(storage_account_connection_string)' --from-literal=CONTAINER_NAME='$(storage_account_blob_name)'
          kubectl apply -f $(Build.SourcesDirectory)/Deployment.yaml
